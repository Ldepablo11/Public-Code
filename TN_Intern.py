# Takes in a list of tuples which are pairs of integers that determine the range
# of the extracted table. Puts all of the tables into a dictionary with key names
# corresponding to table name.

import pandas as pandas

data = pandas.read_excel('/Users/libertodepablo/Desktop/Intern Data Analysis Prompt.xlsx', sheet_name = None)
data_2021 = data['DV Services 2021']
data_2022 = data['DV Services 2022']
data_2023 = data['DV Services 2023']

sample_list = [((3,41),(0,10)), 
               ((41,46),(0,7)),
               ((46,50), (0,7))]

# The table_range() function's purpose is to detect the vertical coordinates of 
# a table within a specifically formatted sheet containing annual data. The function
# only works if every table's first column ends with the value at the top of
# the column with an added ` Subtotal`.
# 
# Inputs: 
# sheet: a dataframe generated through the read_excel function
# cell: a tuple containing two integers, which are the coordinates of a cell as 
# follows (x_coord, y_coord)
# 
# Output: a tuple containing two integers, which are the vertical coordinates 
# describing range of the identified table as follows (table_start, table_end)

def table_range(sheet, cell):
    start_val = sheet.iloc[cell[0], cell[1]]
    for row in range(cell[0] - 1, -1, -1):
        cell_val = sheet.iloc[row, cell[1]]
        stopper = cell_val + ' Subtotal'
        if stopper == start_val:
            return (row, cell[0])

print(table_range(data_2021, (40, 0)))

# Given a specifically formatted services report table, the coord_list function
# creates a list of tuples containing the coordinates of different tables in
# within a given year's sheet. The function only works if the last value of
# every table's first column ends with `Subtotal`, and the first value contains the
# name of the table with an added ` Subtotal`.
# 
# Inputs:
# sheet: a dataframe generated through the read_excel() function
# 
# Output: a list of tuples, each containing a pair of tuples describing the vertical
# and horizontal ranges of the different tables within a sheet.

def coord_list(sheet):
    subtotal_coords = []
    y_coords = []
    result = []
    for row_index, row in sheet.iterrows():
        for col_index, col in enumerate(row):
            if 'Subtotal' in str(col):
                subtotal_coords.append((row_index, col_index))
    
    for pairing in subtotal_coords:
        y_coords.append(table_range(sheet, pairing))

    for interval in y_coords:
        start = interval[0]
        end = interval[1]
        x_coord = sheet.iloc[end].count()
        result.append(((interval[0], interval[1] + 1), (0, int(x_coord))))

    return(result)

sample_list1 = coord_list(data_2021)

# The process function takes in a list and a dataframe as an input. Specifically,
# the first input should be a list of tuples. The second is any excel table that
# was read with pandas. The output is a dictionary where every key corresponds
# to the name of the table.
#
# Inputs: 
# ls: a list containing tuples describing the coordinates of every table within
# a sheet, as would be produced by the coord_list() function.
# sheet: a dataframe generated through the read_excel() function. The tables will
# be exctracted from this dataframe.
#
# Output: a dictionary containing the tables, the name of which to its key.

def process(ls, sheet):
    result = {}
    length = len(ls)
    for pair in ls[0:length]:
        ver_start = pair[0][0]
        ver_end = pair[0][1]
        hor_start = pair[1][0]
        hor_end = pair[1][1]

        df = sheet.iloc[ver_start:ver_end, hor_start:hor_end]
        df = df.reset_index(drop=True)
        df.columns = range(df.shape[1])
        key_name = df.iloc[0,0]
        result[key_name] = df

    return result

# The organize() function is meant take in a dictionary generated by read_excel() 
# the dataframe may contain multiple sheets. 
# 
# Input:
# dic: a dictionary or a dataframe generated through the read-excel() function.
# 
# Output: a dictionary containing a dicionary for each year, in which multiple
# dataframes are stored.

def organize(dic):
    result = {}
    for key, sheet in dic.items():
        result[key] = process(coord_list(sheet), sheet)
    return result

main = organize(data)

import os

example_class = main['DV Services 2021']['Professional Training']

print(example_class)

def save_dataframes_to_csv(data_dict, base_folder):

    if not os.path.exists(base_folder):
        os.makedirs(base_folder)
    
    # Iterate through each year in the dictionary
    for year, dfs_dict in data_dict.items():
        # Create a folder for the current year
        year_folder = os.path.join(base_folder, str(year))
        if not os.path.exists(year_folder):
            os.makedirs(year_folder)
        
        # Iterate through each DataFrame in the year's dictionary
        for df_name, df in dfs_dict.items():
            # Define the path for the CSV file
            csv_path = os.path.join(year_folder, f"{df_name}.csv")
            
            # Save the DataFrame to a CSV file
            df.to_csv(csv_path, index=False)

save_dataframes_to_csv(main, '/Users/libertodepablo/Desktop/Years')
